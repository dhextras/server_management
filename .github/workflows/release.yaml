name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Get current version
      id: get-version
      run: |
        VERSION=$(grep -oP 'version.*=.*"\K[^"]+' central-server/main.go || echo "v0.1.0")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

  build:
    needs: get-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [amd64]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build Central Server
      run: |
        cd central-server
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o central-server-${{ matrix.os }}-${{ matrix.arch }}
        tar -czf central-server-${{ matrix.os }}-${{ matrix.arch }}.tar.gz central-server-${{ matrix.os }}-${{ matrix.arch }}

    - name: Build Child Monitor
      run: |
        cd child-monitor
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o child-monitor-${{ matrix.os }}-${{ matrix.arch }}
        tar -czf child-monitor-${{ matrix.os }}-${{ matrix.arch }}.tar.gz child-monitor-${{ matrix.os }}-${{ matrix.arch }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          central-server/central-server-*
          child-monitor/child-monitor-*

  release:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release files
      run: |
        mkdir -p release-files

        find ./artifacts -name "central-server-*" -exec cp {} release-files/ \;
        find ./artifacts -name "child-monitor-*" -exec cp {} release-files/ \;

        ls -la release-files/

    - name: Create or Update Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.get-version.outputs.version }}
        name: Release ${{ needs.get-version.outputs.version }}
        files: release-files/*
        generate_release_notes: true
        draft: false
        prerelease: false
        make_latest: true
        body: |
          ## ðŸš€ Release ${{ needs.get-version.outputs.version }}

          **Built from commit:** ${{ github.sha }}
          **Build date:** ${{ github.event.head_commit.timestamp }}

          ### Quick Download

          **Central Server:**
          - Linux:
            ```bash
               mkdir -p server_managment
               cd server_managment
               wget https://github.com/${{ github.repository }}/releases/download/${{ needs.get-version.outputs.version }}/central-server-linux-amd64
               chmod +x central-server-linux-amd64
               ./central-server-linux-amd64
            ```

          **Child Monitor:**
          - Linux:
            ```bash
               mkdir -p server_managment
               cd server_managment
               wget https://github.com/${{ github.repository }}/releases/download/${{ needs.get-version.outputs.version }}/child-monitor-linux-amd64
               chmod +x child-monitor-linux-amd64
               ./child-monitor-linux-amd64
            ```

          ### Installation
          ```bash
          chmod +x central-server-linux-amd64
          ./central-server-linux-amd64
          ```

          Auto-generated release notes below:

  build-summary:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "âœ… Build completed successfully!"
        echo "ðŸ“¦ Version: ${{ needs.get-version.outputs.version }}"
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "ðŸš€ Release created/updated for version ${{ needs.get-version.outputs.version }}"
        else
          echo "ðŸ”¨ Build only (not main branch push)"
        fi
